{"name":"效率优化","slug":"效率优化","count":5,"postlist":[{"title":"JS 垃圾回收","uid":"997108380504e887eb3e4c9fa356e3bd","slug":"JS垃圾回收/index","date":"2022-04-01T16:00:00.000Z","updated":"2023-07-20T03:08:46.834Z","comments":true,"path":"api/articles/JS垃圾回收/index.json","keywords":null,"cover":null,"text":"垃圾回收机制垃圾回收有两种方式：标记清除和引用计数 1. 引用计数计算所有变量被引用的次数，为0则可以清除 缺点: 如果两个变量循环引用，则全部无法清除 2. 标记清除垃圾收集器会在运行时将所有内存中的变量做上标记，尝试从根部触及所有的变量，无法触达的则视为可清除的变量 从201...","link":"","photos":[],"count_time":{"symbolsCount":959,"symbolsTime":"1 mins."},"categories":[{"name":"效率优化","slug":"效率优化","count":5,"path":"api/categories/效率优化.json"}],"tags":[{"name":"JS","slug":"JS","count":4,"path":"api/tags/JS.json"},{"name":"垃圾回收","slug":"垃圾回收","count":1,"path":"api/tags/垃圾回收.json"}],"author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"JS 性能优化","uid":"f088523d700dba81d882acdf8af76d34","slug":"JS性能优化/index","date":"2023-07-22T16:00:00.000Z","updated":"2023-07-25T09:11:51.918Z","comments":true,"path":"api/articles/JS性能优化/index.json","keywords":null,"cover":[],"text":"性能优化 Navigation Timing API navigationStart &#x2F; end 表示从上一个文档卸载结束时 &#x3D;&gt; 如果没有上一个文档，这个值和fetchStart相等 unloadEventStart &#x2F; end 标识一个网页...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"效率优化","slug":"效率优化","count":5,"path":"api/categories/效率优化.json"}],"tags":[{"name":"JS","slug":"JS","count":4,"path":"api/tags/JS.json"},{"name":"性能优化","slug":"性能优化","count":1,"path":"api/tags/性能优化.json"}],"author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"函数式编程","uid":"78bf35c97e41da6a2bdad05b63951aa3","slug":"函数式编程/index","date":"2023-07-23T16:00:00.000Z","updated":"2023-07-25T10:23:31.148Z","comments":true,"path":"api/articles/函数式编程/index.json","keywords":null,"cover":null,"text":"一、函数式编程特点1. 原理 加法结合律 | 因式分解 | 完全平方公式 &#x3D;&gt; 原子组合进行变化 a + b + c &#x3D; (a + b) + c 2. 理论思想 函数是一等公民 &#x3D;&gt; 将函数视为实际功能逻辑的落脚点 &#x3D;&gt; ...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"效率优化","slug":"效率优化","count":5,"path":"api/categories/效率优化.json"}],"tags":[{"name":"JS","slug":"JS","count":4,"path":"api/tags/JS.json"},{"name":"函数式编程","slug":"函数式编程","count":1,"path":"api/tags/函数式编程.json"}],"author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"回流和重绘","uid":"252d505e28324426d832f92b75665197","slug":"回流和重绘/index","date":"2023-01-03T16:00:00.000Z","updated":"2023-07-17T06:11:56.277Z","comments":true,"path":"api/articles/回流和重绘/index.json","keywords":null,"cover":null,"text":"浏览器渲染机制浏览器采用流式布局模型。通过把HTML解析成DOM CSS解析成CSSOM DOM和CSSOM合并成Render Tree渲染树。有了Render Tree就知道了所有节点的样式，再计算大小和位置，最后绘制在页面上。 通常计算流式布局只需要一次，但table及其内部...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"效率优化","slug":"效率优化","count":5,"path":"api/categories/效率优化.json"}],"tags":[{"name":"重绘","slug":"重绘","count":1,"path":"api/tags/重绘.json"},{"name":"回流","slug":"回流","count":1,"path":"api/tags/回流.json"}],"author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"防抖和节流","uid":"8091d222d8427423209f6c7e976395c4","slug":"防抖和节流/index","date":"2022-06-01T16:00:00.000Z","updated":"2023-05-08T09:39:57.042Z","comments":true,"path":"api/articles/防抖和节流/index.json","keywords":null,"cover":null,"text":"防抖 场景 所谓防抖，就是指触发事件后 n 秒后才执行函数，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。 非立即执行版本function debounce(func, wait) &#123; let timeout; return function() &#123;...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"效率优化","slug":"效率优化","count":5,"path":"api/categories/效率优化.json"}],"tags":[{"name":"防抖","slug":"防抖","count":1,"path":"api/tags/防抖.json"},{"name":"节流","slug":"节流","count":1,"path":"api/tags/节流.json"}],"author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}