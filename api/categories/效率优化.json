{"name":"效率优化","slug":"效率优化","count":3,"postlist":[{"title":"内存泄漏排查记录","uid":"fe07511baca233cfbf08f1c1c1d5d46a","slug":"内存泄漏/index","date":"2022-11-18T16:00:00.000Z","updated":"2023-04-06T05:05:18.672Z","comments":true,"path":"api/articles/内存泄漏/index.json","keywords":null,"cover":null,"text":" 场景 页面长期不关闭后，页面卡死 排查记录 1、打开浏览器开发工具性能监视器 2、操作页面观察js堆大小发现：随着操作次数增加，js堆内存在每次垃圾回收以后逐次增加 3、刷新页面，查看内存，强制触发垃圾回收，拍摄堆快照 4、反复操作页面后，再次拍摄堆快照 5、对比两次快照，打开...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"效率优化","slug":"效率优化","count":3,"path":"api/categories/效率优化.json"}],"tags":[{"name":"内存泄漏","slug":"内存泄漏","count":1,"path":"api/tags/内存泄漏.json"}],"author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"防抖和节流","uid":"8091d222d8427423209f6c7e976395c4","slug":"防抖和节流/index","date":"2022-06-01T16:00:00.000Z","updated":"2023-05-08T09:39:57.042Z","comments":true,"path":"api/articles/防抖和节流/index.json","keywords":null,"cover":null,"text":"防抖 场景 所谓防抖，就是指触发事件后 n 秒后才执行函数，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。 非立即执行版本function debounce(func, wait) &#123; let timeout; return function() &#123;...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"效率优化","slug":"效率优化","count":3,"path":"api/categories/效率优化.json"}],"tags":[{"name":"防抖","slug":"防抖","count":1,"path":"api/tags/防抖.json"},{"name":"节流","slug":"节流","count":1,"path":"api/tags/节流.json"}],"author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"重绘和回流","uid":"efd899b6174c6f8f76176017b3857176","slug":"重绘和回流/index","date":"2023-01-03T16:00:00.000Z","updated":"2023-05-08T06:14:26.560Z","comments":true,"path":"api/articles/重绘和回流/index.json","keywords":null,"cover":null,"text":"浏览器渲染机制浏览器采用流式布局模型。通过把HTML解析成DOM CSS解析成CSSOM DOM和CSSOM合并成Render Tree渲染树。有了Render Tree就知道了所有节点的样式，再计算大小和位置，最后绘制在页面上。 通常计算流式布局只需要一次，但table及其内部...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"效率优化","slug":"效率优化","count":3,"path":"api/categories/效率优化.json"}],"tags":[{"name":"重绘","slug":"重绘","count":1,"path":"api/tags/重绘.json"},{"name":"回流","slug":"回流","count":1,"path":"api/tags/回流.json"}],"author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}]}