{"title":"前端知识点之JS汇总篇","uid":"c99a5fe4a5656caa27d2f9936274bd86","slug":"前端知识点之JS汇总篇/index","date":"2023-07-01T16:00:00.000Z","updated":"2023-07-17T02:41:30.709Z","comments":true,"path":"api/articles/前端知识点之JS汇总篇/index.json","keywords":null,"cover":[],"content":"<h3 id=\"1-作用域-上下文\"><a href=\"#1-作用域-上下文\" class=\"headerlink\" title=\"1. 作用域 + 上下文\"></a>1. 作用域 + 上下文</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">    console.log(&#39;a&#39;);\n    console.log(c);\n    console.log(d);\n\n    let c &#x3D; &#39;c&#39;;\n    var d &#x3D; &#39;d&#39;;\n    demo();\n    function demo() &#123;\n        console.log(&#39;b&#39;);\n&#125;</code></pre>\n<p>这里的<code>demo</code>可以正常执行是函数提升，在同作用域内，执行在声明之前可以正常执行，但超出作用于的提前使用无效<br>变量<code>c</code>打印会报错<strong>c is not defined</strong>，但d会打印，结果显示为<code>undefined</code>，是因为用var声明变量可以进行变量声明提升（提升声明，但不能提升赋值）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(demo);      &#x2F;&#x2F; ƒ demo() &#123;console.log(1);&#125;\nfunction demo() &#123;\n    console.log(1);\n&#125; \ndemo &#x3D; &#39;demo&#39;;\nconsole.log(demo);      &#x2F;&#x2F; demo</code></pre>\n\n<p>提升优先级 <strong>变量优先</strong>：会优先显示函数，因为先声明了变量，然后函数对同名变量进行了赋值，走到变量赋值的语句后，又对变量进行了覆盖，最后打印出来会是变量</p>\n<h3 id=\"2-this-上下文context\"><a href=\"#2-this-上下文context\" class=\"headerlink\" title=\"2. this 上下文context\"></a>2. this 上下文context</h3><p>this是在执行时动态读取上下文决定的，而不是创建时</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function fn() &#123;\n    console.log(this);  &#x2F;&#x2F; window\n&#125;\nfn();</code></pre>\n<p>this指向函数的调用者也就是window</p>\n<h4 id=\"隐式绑定-——-this指代调用堆栈的上一级-x3D-gt-对象、数组等引用关系逻辑\"><a href=\"#隐式绑定-——-this指代调用堆栈的上一级-x3D-gt-对象、数组等引用关系逻辑\" class=\"headerlink\" title=\"隐式绑定 —— this指代调用堆栈的上一级 &#x3D;&gt; 对象、数组等引用关系逻辑\"></a>隐式绑定 —— this指代调用堆栈的上一级 &#x3D;&gt; 对象、数组等引用关系逻辑</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function fn() &#123;\n    console.log(this.a);\n&#125;\nconst obj &#x3D; &#123;\n    a: 1,\n    fn\n&#125;\nobj.fn();           &#x2F;&#x2F; 1</code></pre>\n\n<h4 id=\"显示绑定-bind-apply-call\"><a href=\"#显示绑定-bind-apply-call\" class=\"headerlink\" title=\"显示绑定 (bind | apply | call)\"></a>显示绑定 (bind | apply | call)</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function fn() &#123;\n    console.log(this);\n&#125;\n\nfn.call(&#123;\n    a: 1\n&#125;);\n\nfn.apply(&#123;\n    a: 1\n&#125;);\n\nconst bindFn &#x3D; fn.bind(&#123;\n    a: 1\n&#125;);\nbindFn();</code></pre>\n\n<h4 id=\"面试题-call、apply、bind的区别\"><a href=\"#面试题-call、apply、bind的区别\" class=\"headerlink\" title=\"面试题 call、apply、bind的区别\"></a>面试题 call、apply、bind的区别</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function demo(arg1, arg2) &#123;\n    return [arg1, arg2];\n&#125;\n\ndemo.call(1, 2);\ndemo.apply([1, 2]);\nconst tempFn &#x3D; demo.bind(this, 1, 2);\ntempFn();</code></pre>\n\n<ul>\n<li>call和apply都是以当前上下文(作用域)直接执行该函数，但区别是传参方式，call是依次传入&#x2F;apply是数组传入</li>\n<li>bind则是传入一个上下文环境(作用域)，返回一个待执行函数，需要再次调用该函数来得到结果</li>\n</ul>\n<h4 id=\"手写题-实现一个bind\"><a href=\"#手写题-实现一个bind\" class=\"headerlink\" title=\"手写题 实现一个bind\"></a>手写题 实现一个bind</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 1. bind函数所处的位置 &#x3D;&gt; Function.prototype\nFunction.prototype.myBind &#x3D; function() &#123;\n    &#x2F;&#x2F; 2. 接收新的作用域和参数\n    const args &#x3D; Array.prototype.slice.call(arguments);\n    const newThis &#x3D; args.shift() || window;\n    &#x2F;&#x2F; 3. 将函数挂载在新的作用域上\n    newThis.tempFn &#x3D; this;\n    &#x2F;&#x2F; 4. 返回待执行函数\n    return function() &#123;\n        &#x2F;&#x2F; 5. 执行后需要清空内存\n        const result &#x3D; args[0] ? newThis.tempFn(...args) : newThis.tempFn();\n        delete newThis.tempFn;\n        return result;\n    &#125;\n&#125;\n\nfunction demo() &#123;\n    return this.a;\n&#125;\n\nconsole.log(demo.myBind(&#123;\n    a: 1\n&#125;)());</code></pre>\n\n<h3 id=\"3-闭包\"><a href=\"#3-闭包\" class=\"headerlink\" title=\"3. 闭包\"></a>3. 闭包</h3><p>闭包: 一个函数和他周围环境状态捆绑在一起的组合</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 函数作为返回值的场景\nfunction demo() &#123;\n    let content &#x3D; &#39;内容&#39;;\n    return function() &#123;\n        return content;\n    &#125;\n&#125;\nconst temp &#x3D; demo;\ntemp();                     &#x2F;&#x2F; 内容\n\n&#x2F;&#x2F; 函数作为参数的时候\nlet content &#x3D; 1;\nfunction demo(fn) &#123;\n    let content &#x3D; 2;\n    fn();\n&#125;\nfunction test() &#123;\n    console.log(content);\n&#125;\ntest();                     &#x2F;&#x2F; 1\ndemo(test);                 &#x2F;&#x2F; 1\n&#x2F;&#x2F; 这里的test形成了window的闭包函数，也是因为content在demo内部，作用域无法作用到声明在window中的test函数</code></pre>\n\n<h3 id=\"4-面向对象\"><a href=\"#4-面向对象\" class=\"headerlink\" title=\"4. 面向对象\"></a>4. 面向对象</h3><h4 id=\"什么是对象？\"><a href=\"#什么是对象？\" class=\"headerlink\" title=\"什么是对象？\"></a>什么是对象？</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过代码抽象，进而描述单个种类物体的方式</p></blockquote>\n<ol>\n<li>对象是对于单个物体的简单抽象</li>\n<li>对象是容器，封装了属性 &amp; 方法</li>\n</ol>\n<p>属性: 对象的状态<br>方法: 对象的能力 &amp; 行为</p>\n<h4 id=\"面向对象特点\"><a href=\"#面向对象特点\" class=\"headerlink\" title=\"面向对象特点\"></a>面向对象特点</h4><ol>\n<li>逻辑迁移更加灵活</li>\n<li>代码复用性更高</li>\n<li>高度模块化</li>\n</ol>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><ol>\n<li>提供一个模板（类） —— 表征了一类物体的共同特性，从而生成对象</li>\n<li>js本质不是基于类，而是基于构造函数 + 原型链</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function People() &#123;\n    this.name &#x3D; &#39;李四&#39;;\n    this.eat &#x3D; food &#x3D;&gt; &#123;\n        return &#96;吃$&#123;food&#125;&#96;;\n    &#125;\n&#125;\n\nconst people &#x3D; new People();</code></pre>\n\n<h5 id=\"追问：如果不使用new进行初始化，构造函数还能具有相同的能力吗？\"><a href=\"#追问：如果不使用new进行初始化，构造函数还能具有相同的能力吗？\" class=\"headerlink\" title=\"追问：如果不使用new进行初始化，构造函数还能具有相同的能力吗？\"></a>追问：如果不使用<code>new</code>进行初始化，构造函数还能具有相同的能力吗？</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>不能，如果不添加<code>new</code>关键字，就只是一个普通函数</p></blockquote>\n<h5 id=\"new是什么？-x2F-new原理？-x2F-new的时候做了什么？\"><a href=\"#new是什么？-x2F-new原理？-x2F-new的时候做了什么？\" class=\"headerlink\" title=\"new是什么？&#x2F; new原理？&#x2F; new的时候做了什么？\"></a>new是什么？&#x2F; new原理？&#x2F; new的时候做了什么？</h5><ol>\n<li>结构上: 创建了一个空对象，作为返回的对象实例</li>\n<li>属性上: 将生成空对象的原型对象指向了构造函数的prototype属性</li>\n<li>关系上: 将当前实例对象赋给了内部的this</li>\n<li>生命周期上: 执行了构造函数的初始化代码</li>\n</ol>\n<h4 id=\"constructor是什么？\"><a href=\"#constructor是什么？\" class=\"headerlink\" title=\"constructor是什么？\"></a>constructor是什么？</h4><ol>\n<li>每个对象在创建时，会自动拥有一个构造函数属性<code>constructor</code></li>\n<li><code>constructor</code>源自原型对象，指向了构造函数的引用</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Demo() &#123;\n\n&#125;\nconst demo &#x3D; new Demo();\n\ndemo.__proto__.constructor &#x3D;&#x3D;&#x3D; Demo;</code></pre>\n\n<h4 id=\"原型对象是什么？\"><a href=\"#原型对象是什么？\" class=\"headerlink\" title=\"原型对象是什么？\"></a>原型对象是什么？</h4><ol>\n<li>在使用<code>new</code>创建对象时，将生成空对象的原型对象指向构造函数的prototype属性，这里产生了原型对象</li>\n<li>是对象和构造函数之间的联系</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Demo() &#123;\n\n&#125;\nconst demo &#x3D; new Demo();\n\ndemo.__proto__ &#x3D;&#x3D;&#x3D; Demo.prototype;</code></pre>\n\n<h5 id=\"思考：对象的原型对象的原型对象是什么？\"><a href=\"#思考：对象的原型对象的原型对象是什么？\" class=\"headerlink\" title=\"思考：对象的原型对象的原型对象是什么？\"></a>思考：对象的原型对象的原型对象是什么？</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Demo() &#123;\n\n&#125;\nconst demo &#x3D; new Demo();\n\ndemo.__proto__.__proto__ &#x3D;&#x3D;&#x3D; Object.prototype;  &#x2F;&#x2F; 也同时解释了自定义对象中的一些非自定义属性和方法的来源\n\nObject.prototype.__proto__ &#x3D;&#x3D;&#x3D; null;        &#x2F;&#x2F; 万物皆null</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>以上就是原型链</p>\n</div>\n<h3 id=\"5-继承\"><a href=\"#5-继承\" class=\"headerlink\" title=\"5. 继承\"></a>5. 继承</h3><h4 id=\"5-1-原型链继承\"><a href=\"#5-1-原型链继承\" class=\"headerlink\" title=\"5.1 原型链继承\"></a>5.1 原型链继承</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Fath() &#123;\n    this.name &#x3D; &#39;父亲&#39;;\n&#125;\nfunction Son() &#123;\n    \n&#125;\n\nSon.prototype &#x3D; new Fath();\nSon.prototype.constructor &#x3D; Son;    &#x2F;&#x2F; 如果不将构造函数指回来，原型链会错乱\n\nconst son &#x3D; new Son();\n\n&#x2F;&#x2F; 原型链式继承，通过修改原型对象的方式，达到继承的目的</code></pre>\n\n<h5 id=\"弊端\"><a href=\"#弊端\" class=\"headerlink\" title=\"弊端\"></a>弊端</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Fath() &#123;\n    this.name &#x3D; &#39;父亲&#39;;\n    this.sons &#x3D; [];\n&#125;\nfunction Son() &#123;\n    \n&#125;\n\nSon.prototype &#x3D; new Fath();\nSon.prototype.constructor &#x3D; Son;\n\nconst son1 &#x3D; new Son();\nconst son2 &#x3D; new Son();\n\nconsole.log(son1);  &#x2F;&#x2F; Son &#123;&#125;\n&#x2F;&#x2F; 父类属性在原型对象中，不在创建对象中\n\nson1.sons.push(&#39;xxx&#39;);\nconsole.log(son2.sons);     &#x2F;&#x2F; [&#39;xxx&#39;]\n&#x2F;&#x2F; 因为这里的son1和son2的sons属性，都是使用的其原型链上的属性，所以这里的sons指向的是同一个地址，起不到对象的属性隔离作用\n\nson1.name &#x3D; &#39;yyy&#39;;\nconsole.log(son1.name);     &#x2F;&#x2F; yyy\n&#x2F;&#x2F; 这里修改成功是因为js的机制导致创建了一个新的属性，实际未修改到目标属性\nconsole.log(son1.__ptoto__.name);       &#x2F;&#x2F; 父亲\n&#x2F;&#x2F; 原型链继承方式中，父类并不能接收子类的属性修改</code></pre>\n\n<ol>\n<li>产生了子类的共享属性，无法隔离</li>\n<li>子项无法修改父类属性，又不能通过创建时传递参数的方式修改</li>\n</ol>\n<h4 id=\"5-2-构造函数继承\"><a href=\"#5-2-构造函数继承\" class=\"headerlink\" title=\"5.2 构造函数继承\"></a>5.2 构造函数继承</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Fath() &#123;\n    this.name &#x3D; &#39;父亲&#39;;\n    this.sons &#x3D; [];\n&#125;\nfunction Son(arg) &#123;\n    Fath.call(this, arg);\n&#125;\n\nconst son &#x3D; new Son();\n\nconsole.log(son);   &#x2F;&#x2F; Son &#123;name: &#39;父亲&#39;, sons: Array(0)&#125;\n\n&#x2F;&#x2F; 同时解决了共享属性 + 子向父传参的问题</code></pre>\n\n<h5 id=\"弊端-1\"><a href=\"#弊端-1\" class=\"headerlink\" title=\"弊端\"></a>弊端</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Fath() &#123;\n    function work() &#123;\n\n    &#125;\n&#125;\nfunction Son(arg) &#123;\n    Fath.call(this, arg);\n&#125;\nconst son &#x3D; new Son();\nson.work();         &#x2F;&#x2F; 报错\n\n&#x2F;&#x2F; 无法继承其父类的函数</code></pre>\n\n<h4 id=\"5-3-组合继承\"><a href=\"#5-3-组合继承\" class=\"headerlink\" title=\"5.3 组合继承\"></a>5.3 组合继承</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Fath() &#123;\n    function work() &#123;\n\n    &#125;\n&#125;\nfunction Son(arg) &#123;\n    Fath.call(this, arg);\n&#125;\nSon.prototype &#x3D; new Fath();\nSon.prototype.constructor &#x3D; Son;\nconst son &#x3D; new Son();</code></pre>\n\n<h5 id=\"弊端-2\"><a href=\"#弊端-2\" class=\"headerlink\" title=\"弊端\"></a>弊端</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Fath() &#123;\n    console.log(&#39;父类构造&#39;);\n&#125;\nfunction Son(arg) &#123;\n    Fath.call(this, arg);\n&#125;\nSon.prototype &#x3D; new Fath();\nSon.prototype.constructor &#x3D; Son;\nconst son &#x3D; new Son();\n\n&#x2F;&#x2F; 结果：父类构造 打印两次</code></pre>\n<p>无论何种场景，父类构造都会被调用两次</p>\n<h4 id=\"5-4-寄生组合继承\"><a href=\"#5-4-寄生组合继承\" class=\"headerlink\" title=\"5.4 寄生组合继承\"></a>5.4 寄生组合继承</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Fath() &#123;\n&#125;\nfunction Son(arg) &#123;\n    Fath.call(this, arg);\n&#125;\nSon.prototype &#x3D; Object.create(Fath.prototype);\nSon.prototype.constructor &#x3D; Son;\nconst son &#x3D; new Son();</code></pre>\n\n<h3 id=\"6-异步\"><a href=\"#6-异步\" class=\"headerlink\" title=\"6. 异步\"></a>6. 异步</h3><h4 id=\"面试题：浏览器的多个窗口是不同线程还是不同进程？多个窗口之间靠什么进行通信？\"><a href=\"#面试题：浏览器的多个窗口是不同线程还是不同进程？多个窗口之间靠什么进行通信？\" class=\"headerlink\" title=\"面试题：浏览器的多个窗口是不同线程还是不同进程？多个窗口之间靠什么进行通信？\"></a>面试题：浏览器的多个窗口是不同线程还是不同进程？多个窗口之间靠什么进行通信？</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>进程<br><code>storage</code>或者<code>cookie</code></p></blockquote>\n<h5 id=\"发散：多种存储的区别？\"><a href=\"#发散：多种存储的区别？\" class=\"headerlink\" title=\"发散：多种存储的区别？\"></a>发散：多种存储的区别？</h5><p><code>sessionstorage</code>和<code>localstorage</code>是生命周期的区别<br><code>storage</code>和<code>cookie</code>是大小长度的区别，跟后台强相关的内容如身份验证等一般用<code>cookie</code>，因为后端可以读写<code>cookie</code>，前端可以通过设置来让每个请求都附带<code>cookie</code></p>\n<h4 id=\"6-1-浏览器原理\"><a href=\"#6-1-浏览器原理\" class=\"headerlink\" title=\"6.1 浏览器原理\"></a>6.1 浏览器原理</h4><p><img src=\"/image/knowledge/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E7%A8%8B%E5%8E%9F%E7%90%86.png\" alt=\"浏览器进程原理\"></p>\n<h4 id=\"6-2-宏任务和微任务\"><a href=\"#6-2-宏任务和微任务\" class=\"headerlink\" title=\"6.2 宏任务和微任务\"></a>6.2 宏任务和微任务</h4><p>宏任务(macro task): <code>script</code> <code>setTimeout</code> <code>setInterval</code> <code>I/O</code><br>微任务(micro task): <code>promise</code> <code>defineProperty</code> <code>Proxy</code></p>\n<p><img src=\"/image/knowledge/%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png\" alt=\"任务执行过程\"></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">setTimeout(() &#x3D;&gt; &#123;\n    console.log(&#39;setTimeout&#39;);          &#x2F;&#x2F; 5. 宏任务2\n&#125;, 0);\n\nnew Promise(reslove &#x3D;&gt; &#123;\n    console.log(&#39;new Promise&#39;);         &#x2F;&#x2F; 1. 宏任务1\n    reslove();\n&#125;).then(() &#x3D;&gt; &#123;\n    console.log(&#39;Promise then&#39;);        &#x2F;&#x2F; 3. 微任务1\n&#125;).then(() &#x3D;&gt; &#123;\n    console.log(&#39;Promise then then&#39;);   &#x2F;&#x2F; 4. 微任务2\n&#125;);\n\nconsole.log(&#39;normal&#39;);                  &#x2F;&#x2F; 2. 宏任务1</code></pre>\n\n<h4 id=\"6-3-Promise\"><a href=\"#6-3-Promise\" class=\"headerlink\" title=\"6.3 Promise\"></a>6.3 Promise</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Promise的出现就是为了解决在异步过程中的回调地狱问题</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">setTimeout(() &#x3D;&gt; &#123;\n    console.log(&#39;step1&#39;);\n\n    setTimeout(() &#x3D;&gt; &#123;\n        console.log(&#39;step2&#39;);\n        \n        setTimeout(() &#x3D;&gt; &#123;\n            console.log(&#39;step3&#39;);\n        &#125;, 0);\n    &#125;, 0);\n&#125;, 0);\n\nnew Promise(reslove &#x3D;&gt; &#123;\n    console.log(&#39;step1&#39;);\n    reslove();\n&#125;).then(() &#x3D;&gt; &#123;\n    console.log(&#39;step2&#39;);\n&#125;).then(() &#x3D;&gt; &#123;\n    console.log(&#39;step3&#39;);\n&#125;);\n\n&#x2F;&#x2F; Promise API\n&#x2F;&#x2F; 全部执行完毕回调\nPromise.all([func, func...]).then(result &#x3D;&gt; &#123;\n    console.log(&#39;all end&#39;, result);\n&#125;);\n&#x2F;&#x2F; 有任意执行完成的，立刻回调\nPromise.race([func, func...]).then(result &#x3D;&gt; &#123;\n    console.log(&#39;race end&#39;, result);\n&#125;);</code></pre>\n\n<h5 id=\"Promise-状态\"><a href=\"#Promise-状态\" class=\"headerlink\" title=\"Promise 状态\"></a>Promise 状态</h5><ol>\n<li><code>pending</code> 待定(默认状态)</li>\n<li><code>fulfilled</code> 已兑现</li>\n<li><code>rejected</code> 已拒绝</li>\n</ol>\n<h5 id=\"Promise-返回\"><a href=\"#Promise-返回\" class=\"headerlink\" title=\"Promise 返回\"></a>Promise 返回</h5><p>返回一个带有<code>then</code>方法，且能接收<code>onFulfilled</code>和<code>onRejected</code>的对象</p>\n<h5 id=\"手写-Promise\"><a href=\"#手写-Promise\" class=\"headerlink\" title=\"手写 Promise\"></a>手写 Promise</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const PENDING &#x3D; &#39;PENDING&#39;;\nconst FULFILLED &#x3D; &#39;FULFILLED&#39;;\nconst REJECTED &#x3D; &#39;REJECTED&#39;;\n\nclass Promise &#123;\n    constructor(executor) &#123;\n        &#x2F;&#x2F; 实现默认状态为PENDING\n        this.status &#x3D; PENDING;\n\n        &#x2F;&#x2F; 内部维护的变量\n        this.value &#x3D; undefined;\n        this.reason &#x3D; undefined;\n\n        &#x2F;&#x2F; 存放传入的回调函数\n        this.onFulfilledCallbacks &#x3D; [];\n        this.onRejectedCallbacks &#x3D; [];\n\n        &#x2F;&#x2F; 回调函数\n        this.reslove &#x3D; value &#x3D;&gt; &#123;\n            if (this.status &#x3D;&#x3D;&#x3D; PENDING) &#123;\n                this.status &#x3D; FULFILLED;\n                this.value &#x3D; value;\n                this.onFulfilledCallbacks.forEach(fn &#x3D;&gt; fn());\n            &#125;\n        &#125;\n        this.reject &#x3D; reason &#x3D;&gt; &#123;\n            if (this.status &#x3D;&#x3D;&#x3D; PENDING) &#123;\n                this.status &#x3D; REJECTED;\n                this.reason &#x3D; reason;\n                this.onRejectedCallbacks.forEach(fn &#x3D;&gt; fn());\n            &#125;\n        &#125;\n\n        try &#123;\n            executor(this.reslove, this.reject);\n        &#125; catch (e) &#123;\n            this.reject(e);\n        &#125;\n    &#125;\n\n    then(onFulfilled, onRejected) &#123;\n        try &#123;\n            if (this.status &#x3D;&#x3D;&#x3D; FULFILLED) &#123;\n                onFulfilled(this.value);\n            &#125; else if (this.status &#x3D;&#x3D;&#x3D; REJECTED) &#123;\n                onRejected(this.reason);\n            &#125; else &#123;\n                this.onFulfilledCallbacks.push(() &#x3D;&gt; &#123;\n                    onFulfilled(this.value);\n                &#125;);\n                this.onRejectedCallbacks.push(() &#x3D;&gt; &#123;\n                    onRejected(this.reason);\n                &#125;);\n            &#125;\n        &#125; catch(e) &#123;\n            this.reject(e);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"7-JS-模块化\"><a href=\"#7-JS-模块化\" class=\"headerlink\" title=\"7. JS 模块化\"></a>7. JS 模块化</h3><h4 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h4><ol>\n<li>隔离每个模块的逻辑和作用域</li>\n<li>扩展共同协作的方便程度<br>&#x3D;&gt; 可以将无数模块进行随意组装<br>&#x3D;&gt; 万物皆模块<br>&#x3D;&gt; 前端工程化</li>\n</ol>\n<h4 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h4><p>本身定位: 简单的页面实际 —— 页面简单动画 + 基本的表单提交<br>并无模块化 or 命名空间的概念</p>\n<h5 id=\"幼年期-无模块化\"><a href=\"#幼年期-无模块化\" class=\"headerlink\" title=\"幼年期: 无模块化\"></a>幼年期: 无模块化</h5><ol>\n<li>开始需要在页面中增加一些不同的js: 动画、表单、格式化工具</li>\n<li>多种js文件被分在不同文件中</li>\n<li>不同的文件又被同一个模板所引用</li>\n</ol>\n<p>被视为是模块化的第一步，是最基础的模块化<br>问题在于：易污染全局作用域 &#x3D;&gt; 不利于大型项目的开发，以及多人团队共建</p>\n<h5 id=\"成长期-模块化雏形-——-IIFE-语法侧自救\"><a href=\"#成长期-模块化雏形-——-IIFE-语法侧自救\" class=\"headerlink\" title=\"成长期: 模块化雏形 —— IIFE(语法侧自救)\"></a>成长期: 模块化雏形 —— IIFE(语法侧自救)</h5><p>本质是: 对作用域的把控</p>\n<p>利用函数独立作用域的特性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 定义一个全局变量\nlet count &#x3D; 0;\nconst increase &#x3D; () &#x3D;&gt; count++;\nconst reset &#x3D; () &#x3D;&gt; count &#x3D; 0;\n\n&#x2F;&#x2F; 演变为\nconst module &#x3D; (() &#x3D;&gt; &#123;\n    let count &#x3D; 0;\n    &#x2F;&#x2F; 主流程 功能\n    return &#123;\n        increase: () &#x3D;&gt; count++;\n        reset: () &#x3D;&gt; &#123;\n            count &#x3D; 0;\n        &#125;\n    &#125;\n&#125;)();\nmodule.increase();\nmodule.reset();\n&#x2F;&#x2F; 定义逻辑 + 立即执行 &#x3D;&gt; 独立的空间\n\n&#x2F;&#x2F; 优化: 能够依赖其他模块的IIFE\nconst iifeModule &#x3D; ((depModule1, depModule2) &#x3D;&gt; &#123;\n    return &#123;\n\n    &#125;\n&#125;)(depencencyModule1, depencencyModule2);</code></pre>\n\n<h5 id=\"成熟期\"><a href=\"#成熟期\" class=\"headerlink\" title=\"成熟期\"></a>成熟期</h5><h6 id=\"CJS-commonjs-node-js制订\"><a href=\"#CJS-commonjs-node-js制订\" class=\"headerlink\" title=\"CJS - commonjs(node.js制订)\"></a>CJS - commonjs(node.js制订)</h6><p>特征: </p>\n<ul>\n<li>通过 <code>module</code> + <code>export</code> 去对外暴露接口</li>\n<li>通过 <code>require</code> 进行其他模块的调用</li>\n</ul>\n<p>优点: </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>CJS率先在服务侧实现了从框架层面解决依赖、模块化的问题</p></blockquote>\n<p>缺憾: </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>针对的是服务端，对于异步依赖没有很友好地处理解决</p></blockquote>\n<h6 id=\"AMD-规范\"><a href=\"#AMD-规范\" class=\"headerlink\" title=\"AMD 规范\"></a>AMD 规范</h6><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过异步加载 + 允许定制回调函数</p></blockquote>\n<p>经典框架: require.js</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">define(id, [depModule], callback);\nrequire([module], callback);\n\ndefine(&#39;amdModule&#39;, [depmodule1, depmodule2], (depModule1, depModule2) &#x3D;&gt; &#123;\n    let count &#x3D; 0;\n    const temp &#x3D; &#123;\n        increase: () &#x3D;&gt; count++;\n        reset: () &#x3D;&gt; count &#x3D; 0;\n    &#125;\n&#125;);\n\n&#x2F;&#x2F; 使用\nrequire([&#39;amdModule&#39;], amdModule &#x3D;&gt; &#123;\n    amdModule.increase();\n&#125;);</code></pre>\n<p>优点: </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>解决了浏览器中异步加载模块，可以并行加载多个模块</p></blockquote>\n<p>缺憾: </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>会有引入成本，缺少考虑按需加载</p></blockquote>\n<h6 id=\"利用AMD进行逻辑外壳封装\"><a href=\"#利用AMD进行逻辑外壳封装\" class=\"headerlink\" title=\"利用AMD进行逻辑外壳封装\"></a>利用AMD进行逻辑外壳封装</h6><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">define(&#39;amdModule&#39;, [depModule1, depModule2], (depModule1, depModule2) &#x3D;&gt; &#123;\n    let count &#x3D; 0;\n    const temp &#x3D; &#123;\n        increase: () &#x3D;&gt; count++;\n        reset: () &#x3D;&gt; &#123;\n            count &#x3D; 0;\n            &#x2F;&#x2F; fn(depModule1);\n            &#x2F;&#x2F; depModule1, depModule2\n        &#125;\n    &#125;\n\n    return &#123;\n        increase,\n        reset\n    &#125;\n&#125;);</code></pre>\n\n<h6 id=\"利用代码兼容AMD和CJS-UMD的出现\"><a href=\"#利用代码兼容AMD和CJS-UMD的出现\" class=\"headerlink\" title=\"利用代码兼容AMD和CJS (UMD的出现)\"></a>利用代码兼容AMD和CJS (UMD的出现)</h6><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">(function() &#123;\n\n&#125;)(\n    &#x2F;&#x2F; 一次性区分CJS和AMD\n    &#x2F;&#x2F; 1. CJS factory\n    &#x2F;&#x2F; 2. module &amp; module exports\n    &#x2F;&#x2F; 3. define\n    typeof module &#x3D;&#x3D;&#x3D; &quot;Object&quot;\n        &amp;&amp; module.exports\n        &amp;&amp; typeof define !&#x3D;&#x3D; &quot;function&quot;\n            ? &#x2F;&#x2F; 是CJS\n                factory &#x3D;&gt; module.export &#x3D; factory(require, exports, module);\n            : &#x2F;&#x2F; 是CMD\n                define\n);</code></pre>\n\n<h6 id=\"CMD-规范-sea-js\"><a href=\"#CMD-规范-sea-js\" class=\"headerlink\" title=\"CMD 规范 - sea.js\"></a>CMD 规范 - sea.js</h6><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">define(&#39;module&#39;, (require, exports, module) &#x3D;&gt; &#123;\n    let $ &#x3D; require(&#39;jquery&#39;);\n    let depModule1 &#x3D; require(&#39;.&#x2F;dependencyModule1&#39;);\n&#125;);</code></pre>\n\n<p>优点: </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>按需加载，依赖就近</p></blockquote>\n<p>缺憾: </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>依赖打包，加载逻辑存在于每个模块中，扩大了模块的体积</p></blockquote>\n<h6 id=\"ESM\"><a href=\"#ESM\" class=\"headerlink\" title=\"ESM\"></a>ESM</h6><p>新增定义：<br>引入——import<br>导出——export</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import depModule1 from &#39;.&#x2F;dependencyModule1&#39;;\n\nlet count &#x3D; 0;\nfunction increase() &#123;\n    count++;\n&#125;\n\nexport default &#123;\n    increase\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 异步加载\nimport(&#39;.&#x2F;demo.js&#39;).then(demo &#x3D;&gt; &#123;\n    demo.default.fn();\n&#125;);</code></pre>","feature":true,"text":"1. 作用域 + 上下文 console.log(&#39;a&#39;); console.log(c); console.log(d); let c &#x3D; &#39;c&#39;; var d &#x3D; &#39;d&#39;; demo(); function ...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"知识点","slug":"知识点","count":10,"path":"api/categories/知识点.json"}],"tags":[{"name":"面试题","slug":"面试题","count":5,"path":"api/tags/面试题.json"},{"name":"JS","slug":"JS","count":1,"path":"api/tags/JS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%9C%E7%94%A8%E5%9F%9F-%E4%B8%8A%E4%B8%8B%E6%96%87\"><span class=\"toc-text\">1. 作用域 + 上下文</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-this-%E4%B8%8A%E4%B8%8B%E6%96%87context\"><span class=\"toc-text\">2. this 上下文context</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9A%90%E5%BC%8F%E7%BB%91%E5%AE%9A-%E2%80%94%E2%80%94-this%E6%8C%87%E4%BB%A3%E8%B0%83%E7%94%A8%E5%A0%86%E6%A0%88%E7%9A%84%E4%B8%8A%E4%B8%80%E7%BA%A7-x3D-gt-%E5%AF%B9%E8%B1%A1%E3%80%81%E6%95%B0%E7%BB%84%E7%AD%89%E5%BC%95%E7%94%A8%E5%85%B3%E7%B3%BB%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">隐式绑定 —— this指代调用堆栈的上一级 &#x3D;&gt; 对象、数组等引用关系逻辑</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%98%BE%E7%A4%BA%E7%BB%91%E5%AE%9A-bind-apply-call\"><span class=\"toc-text\">显示绑定 (bind | apply | call)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E8%AF%95%E9%A2%98-call%E3%80%81apply%E3%80%81bind%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">面试题 call、apply、bind的区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%86%99%E9%A2%98-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAbind\"><span class=\"toc-text\">手写题 实现一个bind</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">3. 闭包</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">4. 面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%AF%B9%E8%B1%A1%EF%BC%9F\"><span class=\"toc-text\">什么是对象？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">面向对象特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">构造函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BF%BD%E9%97%AE%EF%BC%9A%E5%A6%82%E6%9E%9C%E4%B8%8D%E4%BD%BF%E7%94%A8new%E8%BF%9B%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%BF%98%E8%83%BD%E5%85%B7%E6%9C%89%E7%9B%B8%E5%90%8C%E7%9A%84%E8%83%BD%E5%8A%9B%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">追问：如果不使用new进行初始化，构造函数还能具有相同的能力吗？</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#new%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F-x2F-new%E5%8E%9F%E7%90%86%EF%BC%9F-x2F-new%E7%9A%84%E6%97%B6%E5%80%99%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">new是什么？&#x2F; new原理？&#x2F; new的时候做了什么？</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#constructor%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">constructor是什么？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">原型对象是什么？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%80%83%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">思考：对象的原型对象的原型对象是什么？</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">5. 继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">5.1 原型链继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%8A%E7%AB%AF\"><span class=\"toc-text\">弊端</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">5.2 构造函数继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%8A%E7%AB%AF-1\"><span class=\"toc-text\">弊端</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-3-%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">5.3 组合继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%8A%E7%AB%AF-2\"><span class=\"toc-text\">弊端</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-4-%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">5.4 寄生组合继承</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%BC%82%E6%AD%A5\"><span class=\"toc-text\">6. 异步</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%A4%9A%E4%B8%AA%E7%AA%97%E5%8F%A3%E6%98%AF%E4%B8%8D%E5%90%8C%E7%BA%BF%E7%A8%8B%E8%BF%98%E6%98%AF%E4%B8%8D%E5%90%8C%E8%BF%9B%E7%A8%8B%EF%BC%9F%E5%A4%9A%E4%B8%AA%E7%AA%97%E5%8F%A3%E4%B9%8B%E9%97%B4%E9%9D%A0%E4%BB%80%E4%B9%88%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1%EF%BC%9F\"><span class=\"toc-text\">面试题：浏览器的多个窗口是不同线程还是不同进程？多个窗口之间靠什么进行通信？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%91%E6%95%A3%EF%BC%9A%E5%A4%9A%E7%A7%8D%E5%AD%98%E5%82%A8%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">发散：多种存储的区别？</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">6.1 浏览器原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-2-%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">6.2 宏任务和微任务</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-3-Promise\"><span class=\"toc-text\">6.3 Promise</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Promise-%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">Promise 状态</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Promise-%E8%BF%94%E5%9B%9E\"><span class=\"toc-text\">Promise 返回</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%86%99-Promise\"><span class=\"toc-text\">手写 Promise</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-JS-%E6%A8%A1%E5%9D%97%E5%8C%96\"><span class=\"toc-text\">7. JS 模块化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">目标</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%86%E5%8F%B2\"><span class=\"toc-text\">历史</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B9%BC%E5%B9%B4%E6%9C%9F-%E6%97%A0%E6%A8%A1%E5%9D%97%E5%8C%96\"><span class=\"toc-text\">幼年期: 无模块化</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%88%90%E9%95%BF%E6%9C%9F-%E6%A8%A1%E5%9D%97%E5%8C%96%E9%9B%8F%E5%BD%A2-%E2%80%94%E2%80%94-IIFE-%E8%AF%AD%E6%B3%95%E4%BE%A7%E8%87%AA%E6%95%91\"><span class=\"toc-text\">成长期: 模块化雏形 —— IIFE(语法侧自救)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%88%90%E7%86%9F%E6%9C%9F\"><span class=\"toc-text\">成熟期</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#CJS-commonjs-node-js%E5%88%B6%E8%AE%A2\"><span class=\"toc-text\">CJS - commonjs(node.js制订)</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#AMD-%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">AMD 规范</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8AMD%E8%BF%9B%E8%A1%8C%E9%80%BB%E8%BE%91%E5%A4%96%E5%A3%B3%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">利用AMD进行逻辑外壳封装</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8%E4%BB%A3%E7%A0%81%E5%85%BC%E5%AE%B9AMD%E5%92%8CCJS-UMD%E7%9A%84%E5%87%BA%E7%8E%B0\"><span class=\"toc-text\">利用代码兼容AMD和CJS (UMD的出现)</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#CMD-%E8%A7%84%E8%8C%83-sea-js\"><span class=\"toc-text\">CMD 规范 - sea.js</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#ESM\"><span class=\"toc-text\">ESM</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"前端知识点之浏览器相关","uid":"8b52d758712f8281d95dde7e25dd1780","slug":"前端知识点之浏览器相关/index","date":"2023-07-16T16:00:00.000Z","updated":"2023-07-17T05:59:28.797Z","comments":true,"path":"api/articles/前端知识点之浏览器相关/index.json","keywords":null,"cover":null,"text":"浏览器相关1. BOM1.1 locationlocation.href &#x3D;&gt; ‘https://www.xxx.com/search?class=browser#comments‘ .origin &#x3D;&gt; https://www.xxx.com ....","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"知识点","slug":"知识点","count":10,"path":"api/categories/知识点.json"}],"tags":[{"name":"面试题","slug":"面试题","count":5,"path":"api/tags/面试题.json"},{"name":"浏览器","slug":"浏览器","count":1,"path":"api/tags/浏览器.json"},{"name":"js","slug":"js","count":1,"path":"api/tags/js.json"}],"author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"前端知识点之CSS汇总篇","uid":"59630f6cb50b5d1b95c17c1cbb07d624","slug":"前端知识点之CSS汇总篇/index","date":"2023-06-26T16:00:00.000Z","updated":"2023-07-09T06:47:42.700Z","comments":true,"path":"api/articles/前端知识点之CSS汇总篇/index.json","keywords":null,"cover":null,"text":"1. 布局技巧使用text-align-last对其两端文本 使用:not()选择器去除无用属性 多行文本溢出省略号 2. 事件技巧使用pointer-events禁用事件触发，场景：例如背景为地图，上层有图表的大屏看板 使用:hover描绘鼠标跟随 3. 面试题1. absol...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"知识点","slug":"知识点","count":10,"path":"api/categories/知识点.json"}],"tags":[{"name":"CSS","slug":"CSS","count":2,"path":"api/tags/CSS.json"},{"name":"面试题","slug":"面试题","count":5,"path":"api/tags/面试题.json"}],"author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}