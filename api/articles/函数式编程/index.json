{"title":"函数式编程","uid":"78bf35c97e41da6a2bdad05b63951aa3","slug":"函数式编程/index","date":"2023-07-23T16:00:00.000Z","updated":"2023-07-25T10:23:31.148Z","comments":true,"path":"api/articles/函数式编程/index.json","keywords":null,"cover":null,"content":"<h3 id=\"一、函数式编程特点\"><a href=\"#一、函数式编程特点\" class=\"headerlink\" title=\"一、函数式编程特点\"></a>一、函数式编程特点</h3><h4 id=\"1-原理\"><a href=\"#1-原理\" class=\"headerlink\" title=\"1. 原理\"></a>1. 原理</h4><ul>\n<li>加法结合律 | 因式分解 | 完全平方公式 &#x3D;&gt; 原子组合进行变化 a + b + c &#x3D; (a + b) + c</li>\n</ul>\n<h4 id=\"2-理论思想\"><a href=\"#2-理论思想\" class=\"headerlink\" title=\"2. 理论思想\"></a>2. 理论思想</h4><ol>\n<li>函数是一等公民 &#x3D;&gt; 将函数视为实际功能逻辑的落脚点 &#x3D;&gt; 实现函数 + 拼接流程</li>\n<li>声明式编程 &#x3D;&gt; 声明需求</li>\n<li>惰性执行 &#x3D;&gt; 无缝连接 性能节约</li>\n</ol>\n<h4 id=\"3-条件\"><a href=\"#3-条件\" class=\"headerlink\" title=\"3. 条件\"></a>3. 条件</h4><ol>\n<li>无状态</li>\n<li>无副作用</li>\n</ol>\n<h3 id=\"二、实际开发\"><a href=\"#二、实际开发\" class=\"headerlink\" title=\"二、实际开发\"></a>二、实际开发</h3><h4 id=\"1-纯函数改造\"><a href=\"#1-纯函数改造\" class=\"headerlink\" title=\"1. 纯函数改造\"></a>1. 纯函数改造</h4><p>违背纯函数条件的例子</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let num &#x3D; 1;\nfunction demo(obj) &#123;\n    obj.age +&#x3D; num;\n    &#x2F;&#x2F; 引用了外部变量 有状态 不纯粹\n    &#x2F;&#x2F; 修改了输入参数 有副作用 不纯粹\n&#125;</code></pre>\n\n<p>改造后</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let num &#x3D; 1;\nfunction demo(obj, num) &#123;\n    return &#123;\n        ...obj,\n        age: obj.age + num\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"2-流水线组装-加工-amp-拼接\"><a href=\"#2-流水线组装-加工-amp-拼接\" class=\"headerlink\" title=\"2. 流水线组装 - 加工 &amp; 拼接\"></a>2. 流水线组装 - 加工 &amp; 拼接</h4><h5 id=\"加工-柯里化\"><a href=\"#加工-柯里化\" class=\"headerlink\" title=\"加工 - 柯里化\"></a>加工 - 柯里化</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; f(x, y, z) &#x3D;&gt; f(x)(y)(z)\nconst sum &#x3D; (x, y) &#x3D;&gt; &#123;\n    return x + y;\n&#125;\n\nconst add &#x3D; x &#x3D;&gt; &#123;\n    return y &#x3D;&gt; &#123;\n        return x + y;\n    &#125;\n&#125;\n\n&#x2F;&#x2F; 单个函数加工输入输出应该单值化 &#x3D;&gt; 单元函数</code></pre>\n\n<p>面试题 - 实现柯里化的累加函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const add &#x3D; function() &#123;\n    let args &#x3D; Array.prototype.slice.call(arguments);\n    let inner &#x3D; function() &#123;\n        args.push(...arguments);\n        return inner;\n    &#125;\n\n    inner.toString &#x3D; () &#x3D;&gt; &#123;\n        return args.reduce((prev, cur) &#x3D;&gt; prev + cur, 0);\n    &#125;\n\n    return inner;\n&#125;\n\nconsole.log(add(1)(1)(2) + 1);\n&#x2F;&#x2F; 函数的隐式转换 当我们直接将函数参与其他的计算时，函数会默认调用 toString 方法，直接将函数体转换为字符串参与计算</code></pre>\n\n<h5 id=\"拼装-组装函数\"><a href=\"#拼装-组装函数\" class=\"headerlink\" title=\"拼装 - 组装函数\"></a>拼装 - 组装函数</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const compose &#x3D; (f, fn) &#x3D;&gt; f(fn(x));\n\nconst add1 &#x3D; x &#x3D;&gt; x + 1;\nconst add2 &#x3D; x &#x3D;&gt; x + 2;\n\nconst add &#x3D; compose(add1, add2);</code></pre>\n\n<h5 id=\"实际使用\"><a href=\"#实际使用\" class=\"headerlink\" title=\"实际使用\"></a>实际使用</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 命令式\ntrim(reverse(toUpperCase(map(arr))));\n\n&#x2F;&#x2F; 面向对象\narr.map().toUpperCase().reverse().trim();\n\n&#x2F;&#x2F; 函数式\ncompose(trim, reverse, toUpperCase, map);\n&#x2F;&#x2F; 忽略中间过程，面向函数的流水线</code></pre>","feature":true,"text":"一、函数式编程特点1. 原理 加法结合律 | 因式分解 | 完全平方公式 &#x3D;&gt; 原子组合进行变化 a + b + c &#x3D; (a + b) + c 2. 理论思想 函数是一等公民 &#x3D;&gt; 将函数视为实际功能逻辑的落脚点 &#x3D;&gt; ...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"效率优化","slug":"效率优化","count":5,"path":"api/categories/效率优化.json"}],"tags":[{"name":"JS","slug":"JS","count":4,"path":"api/tags/JS.json"},{"name":"函数式编程","slug":"函数式编程","count":1,"path":"api/tags/函数式编程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">一、函数式编程特点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">1. 原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%90%86%E8%AE%BA%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">2. 理论思想</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">3. 条件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">二、实际开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%BA%AF%E5%87%BD%E6%95%B0%E6%94%B9%E9%80%A0\"><span class=\"toc-text\">1. 纯函数改造</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%BB%84%E8%A3%85-%E5%8A%A0%E5%B7%A5-amp-%E6%8B%BC%E6%8E%A5\"><span class=\"toc-text\">2. 流水线组装 - 加工 &amp; 拼接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%B7%A5-%E6%9F%AF%E9%87%8C%E5%8C%96\"><span class=\"toc-text\">加工 - 柯里化</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8B%BC%E8%A3%85-%E7%BB%84%E8%A3%85%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">拼装 - 组装函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">实际使用</span></a></li></ol></li></ol></li></ol>","author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"TypeScript","uid":"0aaa27c48e7b40c2bc96b31fb70803da","slug":"TypeScript知识点/index","date":"2023-07-29T16:00:00.000Z","updated":"2023-07-31T10:03:36.033Z","comments":true,"path":"api/articles/TypeScript知识点/index.json","keywords":null,"cover":null,"text":"一、TS 基础概念1. 什么是TSa. JS的一个超集，在原有基础上添加了可选静态类型，基于类的面向对象编程 编写项目 - 更利于架构维护 自主检测 - 编译期间检测 类型检测 - 支持了动态和静态类型检测 &#x3D;&gt; 本质上存在类型转换 运行流程 - 依赖编译 复杂特...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"知识点","slug":"知识点","count":12,"path":"api/categories/知识点.json"}],"tags":[{"name":"TS","slug":"TS","count":1,"path":"api/tags/TS.json"}],"author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"JS 性能优化","uid":"f088523d700dba81d882acdf8af76d34","slug":"JS性能优化/index","date":"2023-07-22T16:00:00.000Z","updated":"2023-07-25T09:11:51.918Z","comments":true,"path":"api/articles/JS性能优化/index.json","keywords":null,"cover":[],"text":"性能优化 Navigation Timing API navigationStart &#x2F; end 表示从上一个文档卸载结束时 &#x3D;&gt; 如果没有上一个文档，这个值和fetchStart相等 unloadEventStart &#x2F; end 标识一个网页...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"效率优化","slug":"效率优化","count":5,"path":"api/categories/效率优化.json"}],"tags":[{"name":"JS","slug":"JS","count":4,"path":"api/tags/JS.json"},{"name":"性能优化","slug":"性能优化","count":1,"path":"api/tags/性能优化.json"}],"author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}