{"title":"观察者模式 VS 发布订阅模式","uid":"d429359e30d611fd2522983f73e3a623","slug":"观察者模式 VS 发布订阅模式/index","date":"2020-12-29T16:00:00.000Z","updated":"2023-05-08T08:12:45.555Z","comments":true,"path":"api/articles/观察者模式 VS 发布订阅模式/index.json","keywords":null,"cover":null,"content":"<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本质是一种一对多的关系，一指的是目标对象，多指的是观察者，目标对象可以添加多个观察者，当目标对象需要被观测的状态发生改变时，就会通知所有的观察者，是一种紧耦合。</p></blockquote>\n<h4 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 只是一种简单实现，并非只有这一种方式\n&#x2F;&#x2F; 定义一个目标对象\nclass Subject &#123;\n    constructor() &#123;\n        this.Observers &#x3D; [];\n        this.state &#x3D; &#39;初始状态&#39;;\n    &#125;\n    &#x2F;&#x2F;添加\n    add(observer) &#123;\n        this.Observers.push(observer);\n    &#125;\n    &#x2F;&#x2F;移除\n    remove(observer) &#123;\n        this.Observers.filter((item) &#x3D;&gt; item &#x3D;&#x3D;&#x3D; observer);\n    &#125;\n    &#x2F;&#x2F;通知所有观察者\n    notify() &#123;\n        this.Observers.forEach((item) &#x3D;&gt; &#123;\n            item.update();\n        &#125;);\n    &#125;\n    &#x2F;&#x2F;改变状态\n    setState(state) &#123;\n        this.state &#x3D; state;\n        this.notify(state);\n    &#125;\n&#125;\n&#x2F;&#x2F;定义观察者对象\nclass Observer &#123;\n  constructor(name) &#123;\n    this.name &#x3D; name;\n  &#125;\n  update(param) &#123;\n    console.log(&#39;接收更改状态：&#39; + param);\n  &#125;\n&#125;\n\nlet sub &#x3D; new Subject();\nlet obs1 &#x3D; new Observer(&quot;observer1&quot;);\nlet obs2 &#x3D; new Observer(&quot;observer2&quot;);\nsub.add(obs1);\nsub.add(obs2);\nsub.setState(&#39;更新&#39;);</code></pre>\n\n<h3 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>发布订阅模式是一种多对多，通过中间的“经纪人”进行联系，“暗号”为topic，<code>mqtt</code>就是一种发布订阅模式，是一种松耦合。</p></blockquote>\n<h4 id=\"示例代码-1\"><a href=\"#示例代码-1\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 报社\nclass Publisher &#123;\n    constructor(name, channel) &#123;\n        this.name &#x3D; name;\n        this.channel &#x3D; channel;\n    &#125;\n    &#x2F;&#x2F; 注册报纸\n    addTopic(topicName) &#123;\n        this.channel.addTopic(topicName);\n    &#125;\n    &#x2F;&#x2F; 推送报纸\n    publish(topicName) &#123;\n        this.channel.publish(topicName);\n    &#125;\n&#125;\n&#x2F;&#x2F; 订阅者\nclass Subscriber &#123;\n    constructor(name, channel) &#123;\n        this.name &#x3D; name;\n        this.channel &#x3D; channel;\n    &#125;\n    &#x2F;&#x2F;订阅报纸\n    subscribe(topicName) &#123;\n        this.channel.subscribeTopic(topicName, this);\n    &#125;\n    &#x2F;&#x2F;取消订阅\n    unSubscribe(topicName) &#123;\n        this.channel.unSubscribeTopic(topicName, this);\n    &#125;\n    &#x2F;&#x2F;接收推送\n    update(topic) &#123;\n        console.log(&#96;$&#123;topic&#125;已经送到$&#123;this.name&#125;家了&#96;);\n    &#125;\n&#125;\n&#x2F;&#x2F; 第三方平台\nclass Channel &#123;\n    constructor() &#123;\n        this.topics &#x3D; &#123;&#125;;\n    &#125;\n    &#x2F;&#x2F;报社在平台注册报纸\n    addTopic(topicName) &#123;\n        this.topics[topicName] &#x3D; [];\n    &#125;\n    &#x2F;&#x2F;报社取消注册\n    removeTopic(topicName) &#123;\n        delete this.topics[topicName];\n    &#125;\n    &#x2F;&#x2F;订阅者订阅报纸\n    subscribeTopic(topicName, sub) &#123;\n        if (this.topics[topicName]) &#123;\n            this.topics[topicName].push(sub);\n        &#125;\n    &#125;\n    &#x2F;&#x2F;订阅者取消订阅\n    unSubscribeTopic(topicName, sub) &#123;\n        this.topics[topicName].forEach((item, index) &#x3D;&gt; &#123;\n        if (item &#x3D;&#x3D;&#x3D; sub) &#123;\n            this.topics[topicName].splice(index, 1);\n        &#125;\n        &#125;);\n    &#125;\n    &#x2F;&#x2F;平台通知某个报纸下所有订阅者\n    publish(topicName) &#123;\n        this.topics[topicName].forEach((item) &#x3D;&gt; &#123;\n            item.update(topicName);\n        &#125;);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"对比总结思考\"><a href=\"#对比总结思考\" class=\"headerlink\" title=\"对比总结思考\"></a>对比总结思考</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>可以理解为，以前快递员上门送货，后来快递太多了，为了增加效率，分工更明确一点，现在多了个中间站，菜鸟驿站，快递员方便了，这是在规模起来以后自然而然的选择。现在是人主动去拿快递，如果以后连这也嫌弃效率不高，怎么办？再加一层，菜鸟驿站派出机器人送。</p></blockquote>\n","text":"观察者模式 本质是一种一对多的关系，一指的是目标对象，多指的是观察者，目标对象可以添加多个观察者，当目标对象需要被观测的状态发生改变时，就会通知所有的观察者，是一种紧耦合。 示例代码&#x2F;&#x2F; 只是一种简单实现，并非只有这一种方式 &#x2F;&#x2F; 定义一个...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"知识点","slug":"知识点","count":10,"path":"api/categories/知识点.json"}],"tags":[{"name":"发布订阅模式","slug":"发布订阅模式","count":1,"path":"api/tags/发布订阅模式.json"},{"name":"观察者模式","slug":"观察者模式","count":1,"path":"api/tags/观察者模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">观察者模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">发布订阅模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%AF%94%E6%80%BB%E7%BB%93%E6%80%9D%E8%80%83\"><span class=\"toc-text\">对比总结思考</span></a></li></ol>","author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Vue双向绑定","uid":"c61e32720888e2dc2db1b3a1cf94defc","slug":"Vue双向绑定/index","date":"2021-01-19T16:00:00.000Z","updated":"2023-05-15T05:31:26.885Z","comments":true,"path":"api/articles/Vue双向绑定/index.json","keywords":null,"cover":[],"text":"前言 Vue的双向绑定指的是v-model指令，而Vue实际是单向数据流单双向绑定指的是View层和Model层之间的映射关系react采取的是单向绑定Vue的v-model双向绑定实际上只是v-bind:value和v-on:input的语法糖（子组件不能直接修改父组件的属性值...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"知识点","slug":"知识点","count":10,"path":"api/categories/知识点.json"}],"tags":[{"name":"Vue","slug":"Vue","count":1,"path":"api/tags/Vue.json"},{"name":"Vue双向绑定","slug":"Vue双向绑定","count":1,"path":"api/tags/Vue双向绑定.json"}],"author":{"name":"Life Experiencer","slug":"blog-author","avatar":"https://meng160626.github.io/charts/assets/headshot.cf6ae831.jpg","link":"/","description":"【开始努力最好的时机，就是当下】QQ:1350257855      微信:meng000414","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}